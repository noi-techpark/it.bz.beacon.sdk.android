// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: CC0-1.0

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        snapshot {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

configurations.all {
    resolutionStrategy {
        force 'com.google.code.gson:gson:2.8.7'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'io.kontakt.mvn:sdk:7.1.13'
    implementation 'io.swagger:swagger-annotations:1.5.22'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'com.squareup.okhttp:logging-interceptor:2.7.5'
    implementation 'com.squareup:otto:1.3.8'
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation 'org.threeten:threetenbp:1.4.0'
    implementation 'io.gsonfire:gson-fire:1.8.3'
    implementation 'com.android.volley:volley:1.2.0'
    implementation "org.apache.httpcomponents:httpcore:4.4.10"
    implementation "org.apache.httpcomponents:httpmime:4.5.6"
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    // Room components
    implementation "androidx.room:room-runtime:2.3.0"
    annotationProcessor "androidx.room:room-compiler:2.3.0"
    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"
    annotationProcessor "androidx.lifecycle:lifecycle-common-java8:2.3.1"
    // WorkManager for background tasks
    implementation "androidx.work:work-runtime:2.2.0"
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier "sources"
}

publishing {
    publications {
        mavenAar(MavenPublication) {
            groupId 'it.bz.beacon'
            artifactId 'sdk'
            version "${System.getenv('TAG')}"
            artifact(sourceJar)
            artifact("$buildDir/outputs/aar/beaconsuedtirolsdk-${System.getenv('VARIANT')}.aar")
            pom.withXml {
				final dependenciesNode = asNode().appendNode('dependencies')

				ext.addDependency = { Dependency dep, String scope ->
					if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
						return // ignore invalid dependencies

					final dependencyNode = dependenciesNode.appendNode('dependency')
					dependencyNode.appendNode('groupId', dep.group)
					dependencyNode.appendNode('artifactId', dep.name)
					dependencyNode.appendNode('version', dep.version)
					dependencyNode.appendNode('scope', scope)

					if (!dep.transitive) {
						// If this dependency is transitive, we should force exclude all its dependencies them from the POM
						final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
						exclusionNode.appendNode('groupId', '*')
						exclusionNode.appendNode('artifactId', '*')
					} else if (!dep.properties.excludeRules.empty) {
						// Otherwise add specified exclude rules
						final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
						dep.properties.excludeRules.each { ExcludeRule rule ->
							exclusionNode.appendNode('groupId', rule.group ?: '*')
							exclusionNode.appendNode('artifactId', rule.module ?: '*')
						}
					}
				}

				// List all "compile" dependencies (for old Gradle)
				configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
				// List all "api" dependencies (for new Gradle) as "compile" dependencies
				configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
				// List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
				configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }
    repositories {
        maven {
            url "${System.getenv('S3_REPO_URL')}"
            credentials(AwsCredentials) {
                accessKey "${System.getenv('S3_REPO_USERNAME')}"
                secretKey "${System.getenv('S3_REPO_PASSWORD')}"
            }
        }
    }
}
