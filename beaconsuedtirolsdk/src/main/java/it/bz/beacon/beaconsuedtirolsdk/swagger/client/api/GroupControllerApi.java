// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

/**
 * Beacon Suedtirol API
 * The API for the Beacon Suedtirol project for configuring beacons and accessing beacon data.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package it.bz.beacon.beaconsuedtirolsdk.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.BaseMessage;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.Group;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.GroupApiKey;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.GroupAssignment;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.GroupUpdate;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.GroupUserRoleUpdate;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.UserRoleGroup;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.UserRoleMapping;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class GroupControllerApi {
  String basePath = "https://api.beacon.bz.it";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Assign a user to a group
  * 
   * @param groupAssignment groupAssignment
   * @param groupId groupId
   * @return UserRoleGroup
  */
  public UserRoleGroup createUserUsingPATCH (GroupAssignment groupAssignment, Long groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = groupAssignment;
    // verify the required parameter 'groupAssignment' is set
    if (groupAssignment == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupAssignment' when calling createUserUsingPATCH",
        new ApiException(400, "Missing the required parameter 'groupAssignment' when calling createUserUsingPATCH"));
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling createUserUsingPATCH",
        new ApiException(400, "Missing the required parameter 'groupId' when calling createUserUsingPATCH"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{groupId}/users".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserRoleGroup) ApiInvoker.deserialize(localVarResponse, "", UserRoleGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Assign a user to a group
   * 
   * @param groupAssignment groupAssignment   * @param groupId groupId
  */
  public void createUserUsingPATCH (GroupAssignment groupAssignment, Long groupId, final Response.Listener<UserRoleGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = groupAssignment;

    // verify the required parameter 'groupAssignment' is set
    if (groupAssignment == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupAssignment' when calling createUserUsingPATCH",
        new ApiException(400, "Missing the required parameter 'groupAssignment' when calling createUserUsingPATCH"));
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling createUserUsingPATCH",
        new ApiException(400, "Missing the required parameter 'groupId' when calling createUserUsingPATCH"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{groupId}/users".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserRoleGroup) ApiInvoker.deserialize(localVarResponse,  "", UserRoleGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Create a group
  * 
   * @param groupUpdate groupUpdate
   * @return Group
  */
  public Group createUsingPOST1 (GroupUpdate groupUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = groupUpdate;
    // verify the required parameter 'groupUpdate' is set
    if (groupUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupUpdate' when calling createUsingPOST1",
        new ApiException(400, "Missing the required parameter 'groupUpdate' when calling createUsingPOST1"));
    }

    // create path and map variables
    String path = "/v1/admin/groups";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Group) ApiInvoker.deserialize(localVarResponse, "", Group.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Create a group
   * 
   * @param groupUpdate groupUpdate
  */
  public void createUsingPOST1 (GroupUpdate groupUpdate, final Response.Listener<Group> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = groupUpdate;

    // verify the required parameter 'groupUpdate' is set
    if (groupUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupUpdate' when calling createUsingPOST1",
        new ApiException(400, "Missing the required parameter 'groupUpdate' when calling createUsingPOST1"));
    }

    // create path and map variables
    String path = "/v1/admin/groups".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Group) ApiInvoker.deserialize(localVarResponse,  "", Group.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Unassign a user from a group
  * 
   * @param groupId groupId
   * @param userId userId
   * @return BaseMessage
  */
  public BaseMessage deleteUserUsingDELETE (Long groupId, Long userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling deleteUserUsingDELETE",
        new ApiException(400, "Missing the required parameter 'groupId' when calling deleteUserUsingDELETE"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling deleteUserUsingDELETE",
        new ApiException(400, "Missing the required parameter 'userId' when calling deleteUserUsingDELETE"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{groupId}/users/{userId}".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BaseMessage) ApiInvoker.deserialize(localVarResponse, "", BaseMessage.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Unassign a user from a group
   * 
   * @param groupId groupId   * @param userId userId
  */
  public void deleteUserUsingDELETE (Long groupId, Long userId, final Response.Listener<BaseMessage> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling deleteUserUsingDELETE",
        new ApiException(400, "Missing the required parameter 'groupId' when calling deleteUserUsingDELETE"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling deleteUserUsingDELETE",
        new ApiException(400, "Missing the required parameter 'userId' when calling deleteUserUsingDELETE"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{groupId}/users/{userId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BaseMessage) ApiInvoker.deserialize(localVarResponse,  "", BaseMessage.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Delete a group
  * 
   * @param id id
   * @return BaseMessage
  */
  public BaseMessage deleteUsingDELETE (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteUsingDELETE",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteUsingDELETE"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BaseMessage) ApiInvoker.deserialize(localVarResponse, "", BaseMessage.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete a group
   * 
   * @param id id
  */
  public void deleteUsingDELETE (Long id, final Response.Listener<BaseMessage> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling deleteUsingDELETE",
        new ApiException(400, "Missing the required parameter 'id' when calling deleteUsingDELETE"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BaseMessage) ApiInvoker.deserialize(localVarResponse,  "", BaseMessage.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View the assigned api key of a group
  * 
   * @param id id
   * @return GroupApiKey
  */
  public GroupApiKey getApiKeyUsingGET (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getApiKeyUsingGET",
        new ApiException(400, "Missing the required parameter 'id' when calling getApiKeyUsingGET"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{id}/apiKey".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GroupApiKey) ApiInvoker.deserialize(localVarResponse, "", GroupApiKey.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View the assigned api key of a group
   * 
   * @param id id
  */
  public void getApiKeyUsingGET (Long id, final Response.Listener<GroupApiKey> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getApiKeyUsingGET",
        new ApiException(400, "Missing the required parameter 'id' when calling getApiKeyUsingGET"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{id}/apiKey".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GroupApiKey) ApiInvoker.deserialize(localVarResponse,  "", GroupApiKey.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View a list of available groups
  * 
   * @return List<Group>
  */
  public List<Group> getListUsingGET1 () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/v1/admin/groups";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Group>) ApiInvoker.deserialize(localVarResponse, "array", Group.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View a list of available groups
   * 

  */
  public void getListUsingGET1 (final Response.Listener<List<Group>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/v1/admin/groups".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Group>) ApiInvoker.deserialize(localVarResponse,  "array", Group.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * View a list of all assigned user of a group
  * 
   * @param groupId groupId
   * @return List<UserRoleMapping>
  */
  public List<UserRoleMapping> getUserListUsingGET (Long groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getUserListUsingGET",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getUserListUsingGET"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{groupId}/users".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<UserRoleMapping>) ApiInvoker.deserialize(localVarResponse, "array", UserRoleMapping.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * View a list of all assigned user of a group
   * 
   * @param groupId groupId
  */
  public void getUserListUsingGET (Long groupId, final Response.Listener<List<UserRoleMapping>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling getUserListUsingGET",
        new ApiException(400, "Missing the required parameter 'groupId' when calling getUserListUsingGET"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{groupId}/users".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<UserRoleMapping>) ApiInvoker.deserialize(localVarResponse,  "array", UserRoleMapping.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Search a group with an ID
  * 
   * @param id id
   * @return Group
  */
  public Group getUsingGET1 (Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getUsingGET1",
        new ApiException(400, "Missing the required parameter 'id' when calling getUsingGET1"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Group) ApiInvoker.deserialize(localVarResponse, "", Group.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Search a group with an ID
   * 
   * @param id id
  */
  public void getUsingGET1 (Long id, final Response.Listener<Group> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling getUsingGET1",
        new ApiException(400, "Missing the required parameter 'id' when calling getUsingGET1"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Group) ApiInvoker.deserialize(localVarResponse,  "", Group.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update the role of a user in a group
  * 
   * @param groupId groupId
   * @param groupUserRoleUpdate groupUserRoleUpdate
   * @param userId userId
   * @return UserRoleGroup
  */
  public UserRoleGroup updateUserUsingPATCH (Long groupId, GroupUserRoleUpdate groupUserRoleUpdate, Long userId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = groupUserRoleUpdate;
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling updateUserUsingPATCH",
        new ApiException(400, "Missing the required parameter 'groupId' when calling updateUserUsingPATCH"));
    }
    // verify the required parameter 'groupUserRoleUpdate' is set
    if (groupUserRoleUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupUserRoleUpdate' when calling updateUserUsingPATCH",
        new ApiException(400, "Missing the required parameter 'groupUserRoleUpdate' when calling updateUserUsingPATCH"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling updateUserUsingPATCH",
        new ApiException(400, "Missing the required parameter 'userId' when calling updateUserUsingPATCH"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{groupId}/users/{userId}".replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (UserRoleGroup) ApiInvoker.deserialize(localVarResponse, "", UserRoleGroup.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update the role of a user in a group
   * 
   * @param groupId groupId   * @param groupUserRoleUpdate groupUserRoleUpdate   * @param userId userId
  */
  public void updateUserUsingPATCH (Long groupId, GroupUserRoleUpdate groupUserRoleUpdate, Long userId, final Response.Listener<UserRoleGroup> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = groupUserRoleUpdate;

    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling updateUserUsingPATCH",
        new ApiException(400, "Missing the required parameter 'groupId' when calling updateUserUsingPATCH"));
    }
    // verify the required parameter 'groupUserRoleUpdate' is set
    if (groupUserRoleUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupUserRoleUpdate' when calling updateUserUsingPATCH",
        new ApiException(400, "Missing the required parameter 'groupUserRoleUpdate' when calling updateUserUsingPATCH"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling updateUserUsingPATCH",
        new ApiException(400, "Missing the required parameter 'userId' when calling updateUserUsingPATCH"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{groupId}/users/{userId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "groupId" + "\\}", apiInvoker.escapeString(groupId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserRoleGroup) ApiInvoker.deserialize(localVarResponse,  "", UserRoleGroup.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Update a group
  * 
   * @param groupUpdate groupUpdate
   * @param id id
   * @return Group
  */
  public Group updateUsingPATCH1 (GroupUpdate groupUpdate, Long id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = groupUpdate;
    // verify the required parameter 'groupUpdate' is set
    if (groupUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupUpdate' when calling updateUsingPATCH1",
        new ApiException(400, "Missing the required parameter 'groupUpdate' when calling updateUsingPATCH1"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateUsingPATCH1",
        new ApiException(400, "Missing the required parameter 'id' when calling updateUsingPATCH1"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{id}".replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "JWT" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Group) ApiInvoker.deserialize(localVarResponse, "", Group.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Update a group
   * 
   * @param groupUpdate groupUpdate   * @param id id
  */
  public void updateUsingPATCH1 (GroupUpdate groupUpdate, Long id, final Response.Listener<Group> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = groupUpdate;

    // verify the required parameter 'groupUpdate' is set
    if (groupUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupUpdate' when calling updateUsingPATCH1",
        new ApiException(400, "Missing the required parameter 'groupUpdate' when calling updateUsingPATCH1"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling updateUsingPATCH1",
        new ApiException(400, "Missing the required parameter 'id' when calling updateUsingPATCH1"));
    }

    // create path and map variables
    String path = "/v1/admin/groups/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "JWT" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Group) ApiInvoker.deserialize(localVarResponse,  "", Group.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
