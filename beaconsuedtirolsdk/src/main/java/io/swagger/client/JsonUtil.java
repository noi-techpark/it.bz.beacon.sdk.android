// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

/**
 * Beacon Suedtirol API
 * The API for the Beacon Suedtirol project for configuring beacons and accessing beacon data.
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import it.bz.beacon.beaconsuedtirolsdk.swagger.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AuthenticationRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<AuthenticationRequest>>(){}.getType();
    }
    
    if ("AuthenticationToken".equalsIgnoreCase(className)) {
      return new TypeToken<List<AuthenticationToken>>(){}.getType();
    }
    
    if ("AuthenticationTokenCheck".equalsIgnoreCase(className)) {
      return new TypeToken<List<AuthenticationTokenCheck>>(){}.getType();
    }
    
    if ("AuthenticationTokenCheckRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<AuthenticationTokenCheckRequest>>(){}.getType();
    }
    
    if ("BaseMessage".equalsIgnoreCase(className)) {
      return new TypeToken<List<BaseMessage>>(){}.getType();
    }
    
    if ("Beacon".equalsIgnoreCase(className)) {
      return new TypeToken<List<Beacon>>(){}.getType();
    }
    
    if ("BeaconBatteryLevelUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<List<BeaconBatteryLevelUpdate>>(){}.getType();
    }
    
    if ("BeaconImage".equalsIgnoreCase(className)) {
      return new TypeToken<List<BeaconImage>>(){}.getType();
    }
    
    if ("BeaconIssue".equalsIgnoreCase(className)) {
      return new TypeToken<List<BeaconIssue>>(){}.getType();
    }
    
    if ("BeaconOrder".equalsIgnoreCase(className)) {
      return new TypeToken<List<BeaconOrder>>(){}.getType();
    }
    
    if ("BeaconOrderData".equalsIgnoreCase(className)) {
      return new TypeToken<List<BeaconOrderData>>(){}.getType();
    }
    
    if ("BeaconUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<List<BeaconUpdate>>(){}.getType();
    }
    
    if ("Group".equalsIgnoreCase(className)) {
      return new TypeToken<List<Group>>(){}.getType();
    }
    
    if ("GroupApiKey".equalsIgnoreCase(className)) {
      return new TypeToken<List<GroupApiKey>>(){}.getType();
    }
    
    if ("GroupAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<List<GroupAssignment>>(){}.getType();
    }
    
    if ("GroupUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<List<GroupUpdate>>(){}.getType();
    }
    
    if ("GroupUserRoleUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<List<GroupUserRoleUpdate>>(){}.getType();
    }
    
    if ("Info".equalsIgnoreCase(className)) {
      return new TypeToken<List<Info>>(){}.getType();
    }
    
    if ("InfoUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<List<InfoUpdate>>(){}.getType();
    }
    
    if ("InputStream".equalsIgnoreCase(className)) {
      return new TypeToken<List<InputStream>>(){}.getType();
    }
    
    if ("IssueCreation".equalsIgnoreCase(className)) {
      return new TypeToken<List<IssueCreation>>(){}.getType();
    }
    
    if ("IssueSolution".equalsIgnoreCase(className)) {
      return new TypeToken<List<IssueSolution>>(){}.getType();
    }
    
    if ("ManufacturerOrder".equalsIgnoreCase(className)) {
      return new TypeToken<List<ManufacturerOrder>>(){}.getType();
    }
    
    if ("PasswordChange".equalsIgnoreCase(className)) {
      return new TypeToken<List<PasswordChange>>(){}.getType();
    }
    
    if ("PasswordReset".equalsIgnoreCase(className)) {
      return new TypeToken<List<PasswordReset>>(){}.getType();
    }
    
    if ("PendingConfiguration".equalsIgnoreCase(className)) {
      return new TypeToken<List<PendingConfiguration>>(){}.getType();
    }
    
    if ("ResetPasswordChange".equalsIgnoreCase(className)) {
      return new TypeToken<List<ResetPasswordChange>>(){}.getType();
    }
    
    if ("ResetPasswordRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<ResetPasswordRequest>>(){}.getType();
    }
    
    if ("Resource".equalsIgnoreCase(className)) {
      return new TypeToken<List<Resource>>(){}.getType();
    }
    
    if ("URI".equalsIgnoreCase(className)) {
      return new TypeToken<List<URI>>(){}.getType();
    }
    
    if ("URL".equalsIgnoreCase(className)) {
      return new TypeToken<List<URL>>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<List<User>>(){}.getType();
    }
    
    if ("UserCreation".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserCreation>>(){}.getType();
    }
    
    if ("UserRoleGroup".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserRoleGroup>>(){}.getType();
    }
    
    if ("UserRoleMapping".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserRoleMapping>>(){}.getType();
    }
    
    if ("UserUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserUpdate>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AuthenticationRequest".equalsIgnoreCase(className)) {
      return new TypeToken<AuthenticationRequest>(){}.getType();
    }
    
    if ("AuthenticationToken".equalsIgnoreCase(className)) {
      return new TypeToken<AuthenticationToken>(){}.getType();
    }
    
    if ("AuthenticationTokenCheck".equalsIgnoreCase(className)) {
      return new TypeToken<AuthenticationTokenCheck>(){}.getType();
    }
    
    if ("AuthenticationTokenCheckRequest".equalsIgnoreCase(className)) {
      return new TypeToken<AuthenticationTokenCheckRequest>(){}.getType();
    }
    
    if ("BaseMessage".equalsIgnoreCase(className)) {
      return new TypeToken<BaseMessage>(){}.getType();
    }
    
    if ("Beacon".equalsIgnoreCase(className)) {
      return new TypeToken<Beacon>(){}.getType();
    }
    
    if ("BeaconBatteryLevelUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<BeaconBatteryLevelUpdate>(){}.getType();
    }
    
    if ("BeaconImage".equalsIgnoreCase(className)) {
      return new TypeToken<BeaconImage>(){}.getType();
    }
    
    if ("BeaconIssue".equalsIgnoreCase(className)) {
      return new TypeToken<BeaconIssue>(){}.getType();
    }
    
    if ("BeaconOrder".equalsIgnoreCase(className)) {
      return new TypeToken<BeaconOrder>(){}.getType();
    }
    
    if ("BeaconOrderData".equalsIgnoreCase(className)) {
      return new TypeToken<BeaconOrderData>(){}.getType();
    }
    
    if ("BeaconUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<BeaconUpdate>(){}.getType();
    }
    
    if ("Group".equalsIgnoreCase(className)) {
      return new TypeToken<Group>(){}.getType();
    }
    
    if ("GroupApiKey".equalsIgnoreCase(className)) {
      return new TypeToken<GroupApiKey>(){}.getType();
    }
    
    if ("GroupAssignment".equalsIgnoreCase(className)) {
      return new TypeToken<GroupAssignment>(){}.getType();
    }
    
    if ("GroupUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<GroupUpdate>(){}.getType();
    }
    
    if ("GroupUserRoleUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<GroupUserRoleUpdate>(){}.getType();
    }
    
    if ("Info".equalsIgnoreCase(className)) {
      return new TypeToken<Info>(){}.getType();
    }
    
    if ("InfoUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<InfoUpdate>(){}.getType();
    }
    
    if ("InputStream".equalsIgnoreCase(className)) {
      return new TypeToken<InputStream>(){}.getType();
    }
    
    if ("IssueCreation".equalsIgnoreCase(className)) {
      return new TypeToken<IssueCreation>(){}.getType();
    }
    
    if ("IssueSolution".equalsIgnoreCase(className)) {
      return new TypeToken<IssueSolution>(){}.getType();
    }
    
    if ("ManufacturerOrder".equalsIgnoreCase(className)) {
      return new TypeToken<ManufacturerOrder>(){}.getType();
    }
    
    if ("PasswordChange".equalsIgnoreCase(className)) {
      return new TypeToken<PasswordChange>(){}.getType();
    }
    
    if ("PasswordReset".equalsIgnoreCase(className)) {
      return new TypeToken<PasswordReset>(){}.getType();
    }
    
    if ("PendingConfiguration".equalsIgnoreCase(className)) {
      return new TypeToken<PendingConfiguration>(){}.getType();
    }
    
    if ("ResetPasswordChange".equalsIgnoreCase(className)) {
      return new TypeToken<ResetPasswordChange>(){}.getType();
    }
    
    if ("ResetPasswordRequest".equalsIgnoreCase(className)) {
      return new TypeToken<ResetPasswordRequest>(){}.getType();
    }
    
    if ("Resource".equalsIgnoreCase(className)) {
      return new TypeToken<Resource>(){}.getType();
    }
    
    if ("URI".equalsIgnoreCase(className)) {
      return new TypeToken<URI>(){}.getType();
    }
    
    if ("URL".equalsIgnoreCase(className)) {
      return new TypeToken<URL>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<User>(){}.getType();
    }
    
    if ("UserCreation".equalsIgnoreCase(className)) {
      return new TypeToken<UserCreation>(){}.getType();
    }
    
    if ("UserRoleGroup".equalsIgnoreCase(className)) {
      return new TypeToken<UserRoleGroup>(){}.getType();
    }
    
    if ("UserRoleMapping".equalsIgnoreCase(className)) {
      return new TypeToken<UserRoleMapping>(){}.getType();
    }
    
    if ("UserUpdate".equalsIgnoreCase(className)) {
      return new TypeToken<UserUpdate>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
